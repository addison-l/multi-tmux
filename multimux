#!/usr/bin/env perl

use warnings;
use strict;

use FindBin;
use lib $FindBin::Bin;

use Params;

my %options = Params::GetParams();

my $window = '';
my @hosts = @{$options{'hosts'}};

sub VPrint (@) {
	if ($options{'verbose'}) {
		print @_;
	}
}


unless (-t STDIN) {
    VPrint "Reading hosts in from STDIN \n";
    while (<STDIN>){
	    for (split(/\s+/, $_)){
		    push(@hosts, $_) if $_;
	    }
    }
}

sub FindWindow {
	my $windowmass = `tmux list-windows`;
	my @splitwin =  split (/\n/, $windowmass);
	for (@splitwin){
		if (m/(active)/){
			my @a = split(/:/, $_);
			$window = $a[0];
			VPrint "window = $window\n";
		}
	}
}

sub GetTmuxVersion {
    my $ver_string = `tmux -V`;
    $ver_string =~ m/tmux\s+([0-9]+\.[0-9]+)/;
    VPrint "tmux version is $1\n";
    return $1
}

sub MakePanes {
        my $break_opt = '-t';
	my $ssh_opts = '';
        if (GetTmuxVersion() >= 2.1){
            $break_opt = '-s'
        }
	if ($options{'user'}){
		$ssh_opts .= " -l $options{'user'} "
	}
	if ($options{'extended'}){
		$ssh_opts .= $options{'extended'}
	}
	for (@hosts){
		VPrint "\nsplitting window for host $_ ";
		my $ssh_cmd = "ssh $ssh_opts $_";
		VPrint "\nssh command: $ssh_cmd ";
		VPrint `tmux split-window -t $window -d $ssh_cmd`;
		VPrint `tmux select-layout -t $window tiled`;
	}
	VPrint "\nbreaking original pane off\n";
	VPrint `tmux set-window-option synchronize-panes on` if $options{'sync'};
	VPrint `tmux break-pane $break_opt 0`;
	VPrint `tmux select-layout -t $window tiled`

}


FindWindow();
MakePanes();
